// 30-–¥–Ω–µ–≤–Ω–∞—è –∏–≥—Ä–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫–æ—Ñ–µ–∏–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

const TOTAL_DAYS = 30;
const COFFEE_PRICE = 150; // –¶–µ–Ω–∞ –∫–æ—Ñ–µ –≤ —Ä—É–±–ª—è—Ö

// –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö (–Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã)
const rewards = {
    1: {
        title: "–ù–∞—á–∞–ª–æ –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏", 
        description: "–ö–æ—Ñ–µ–∏–Ω –Ω–∞—á–∞–ª –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–º–∞. –ü–µ—Ä–∏–æ–¥ –ø–æ–ª—É—Ä–∞—Å–ø–∞–¥–∞ –∫–æ—Ñ–µ–∏–Ω–∞ –≤ –∫—Ä–æ–≤–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5-6 —á–∞—Å–æ–≤.",
        icon: "üéØ"
    },
    3: {
        title: "–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ª–æ–º–∫–∏", 
        description: "–°–∏–Ω–¥—Ä–æ–º –æ—Ç–º–µ–Ω—ã –ø–æ–∑–∞–¥–∏! –°–∞–º—ã–µ —Ç—è–∂–µ–ª—ã–µ –¥–Ω–∏ –ø—Ä–æ—à–ª–∏. –ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è.",
        icon: "üí™"
    },
    7: {
        title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞", 
        description: "–ê–¥–µ–Ω–æ–∑–∏–Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–æ—Å—å, –∑–∞—Å—ã–ø–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ.",
        icon: "üò¥"
    },
    14: {
        title: "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏", 
        description: "–£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ (–≥–æ—Ä–º–æ–Ω–∞ —Å—Ç—Ä–µ—Å—Å–∞) –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª—Å—è. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ —É–ª—É—á—à–∏–ª–∏—Å—å.",
        icon: "üòå"
    },
    21: {
        title: "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", 
        description: "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞! –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–æ–≤.",
        icon: "üîÑ"
    },
    30: {
        title: "–ü–û–ë–ï–î–ê! –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", 
        description: "–û—Ä–≥–∞–Ω–∏–∑–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è! –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–æ—Å—å, —Å–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ.",
        icon: "üèÜ"
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let gameState = {
    markedDays: [],
    unlockedRewards: [],
    startDate: null,
    currentStreak: 0,
    totalMarked: 0
};

let storageMethod = 'url';

// === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø ===

// –ú–µ—Ç–æ–¥ 1: Cookies (–æ—Å–Ω–æ–≤–Ω–æ–π)
function setCookie(name, value, days = 365) {
    try {
        const expires = new Date();
        expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = name + '=' + encodeURIComponent(JSON.stringify(value)) + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
        return true;
    } catch (e) {
        console.warn('Cookies –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', e);
        return false;
    }
}

function getCookie(name) {
    try {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for(let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) {
                return JSON.parse(decodeURIComponent(c.substring(nameEQ.length, c.length)));
            }
        }
        return null;
    } catch (e) {
        return null;
    }
}

// –ú–µ—Ç–æ–¥ 2: localStorage (–∑–∞–ø–∞—Å–Ω–æ–π)
function setLocalStorage(name, value) {
    try {
        localStorage.setItem(name, JSON.stringify(value));
        return true;
    } catch (e) {
        return false;
    }
}

function getLocalStorage(name) {
    try {
        const item = localStorage.getItem(name);
        return item ? JSON.parse(item) : null;
    } catch (e) {
        return null;
    }
}

// –ú–µ—Ç–æ–¥ 3: URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤)
function setUrlParam(name, value) {
    try {
        const url = new URL(window.location);
        url.searchParams.set(name, encodeURIComponent(JSON.stringify(value)));
        window.history.replaceState({}, '', url);
        return true;
    } catch (e) {
        return false;
    }
}

function getUrlParam(name) {
    try {
        const url = new URL(window.location);
        const param = url.searchParams.get(name);
        return param ? JSON.parse(decodeURIComponent(param)) : null;
    } catch (e) {
        return null;
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function detectStorageMethod() {
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–±—É–µ–º cookies
    if (setCookie('test', 'test', 1)) {
        const testValue = getCookie('test');
        if (testValue === 'test') {
            setCookie('test', '', -1); // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç
            storageMethod = 'cookies';
            console.log('‚úÖ Cookies –¥–æ—Å—Ç—É–ø–Ω—ã');
            return 'cookies';
        }
    }
    
    // –ü—Ä–æ–±—É–µ–º localStorage
    if (setLocalStorage('test', 'test')) {
        const testValue = getLocalStorage('test');
        if (testValue === 'test') {
            try { localStorage.removeItem('test'); } catch(e) {}
            storageMethod = 'localStorage';
            console.log('‚úÖ localStorage –¥–æ—Å—Ç—É–ø–µ–Ω');
            return 'localStorage';
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    storageMethod = 'url';
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    return 'url';
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData(key, data) {
    let success = false;
    
    try {
        if (storageMethod === 'cookies') {
            success = setCookie(key, data, 365);
            if (success && getCookie(key) !== null) {
                updateStorageStatus('cookies', 'success');
                return true;
            }
        }
        
        if (storageMethod === 'localStorage') {
            success = setLocalStorage(key, data);
            if (success && getLocalStorage(key) !== null) {
                updateStorageStatus('localStorage', 'success');
                return true;
            }
        }
        
        // URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        success = setUrlParam(key, data);
        if (success) {
            storageMethod = 'url';
            updateStorageStatus('url', 'success');
            return true;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        updateStorageStatus(storageMethod, 'error');
        return false;
    }
    
    updateStorageStatus(storageMethod, 'error');
    return false;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData(key) {
    try {
        let data = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
        if (storageMethod === 'cookies') {
            data = getCookie(key);
            if (data) return data;
        } else if (storageMethod === 'localStorage') {
            data = getLocalStorage(key);
            if (data) return data;
        } else if (storageMethod === 'url') {
            data = getUrlParam(key);
            if (data) return data;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Ç–æ–¥–µ, –ø—Ä–æ–±—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if (!data) {
            data = getCookie(key);
            if (data) {
                storageMethod = 'cookies';
                console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ cookies, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ cookies');
                return data;
            }
        }
        
        if (!data) {
            data = getLocalStorage(key);
            if (data) {
                storageMethod = 'localStorage';
                console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ localStorage, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ localStorage');
                return data;
            }
        }
        
        if (!data) {
            data = getUrlParam(key);
            if (data) {
                storageMethod = 'url';
                console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ URL');
                return data;
            }
        }
        
        return null;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        return null;
    }
}

// === –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ===

function canMarkDay(day) {
    if (gameState.markedDays.includes(day)) return false;
    if (day === 1) return true;
    
    const maxMarkedDay = Math.max(0, ...gameState.markedDays);
    return day === maxMarkedDay + 1;
}

function markDay(day) {
    if (!canMarkDay(day)) {
        console.log(`‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å ${day}`);
        return false;
    }

    gameState.markedDays.push(day);
    gameState.markedDays.sort((a, b) => a - b);
    gameState.totalMarked = gameState.markedDays.length;

    if (day === 1 && !gameState.startDate) {
        gameState.startDate = new Date().toISOString();
    }

    console.log(`‚úÖ –î–µ–Ω—å ${day} –æ—Ç–º–µ—á–µ–Ω!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    if (rewards[day] && !gameState.unlockedRewards.includes(day)) {
        gameState.unlockedRewards.push(day);
        console.log(`üéâ –ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–µ–Ω—å ${day}!`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            showReward(day);
        }, 500);
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º streak
    calculateStreak();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    saveGameState();
    updateInterface();
    
    return true;
}

function unmarkDay(day) {
    const index = gameState.markedDays.indexOf(day);
    if (index === -1) return false;
    
    const maxDay = Math.max(...gameState.markedDays);
    if (day !== maxDay) {
        console.log(`‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É —Å –¥–Ω—è ${day} - –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π`);
        return false;
    }
    
    gameState.markedDays.splice(index, 1);
    gameState.totalMarked = gameState.markedDays.length;
    
    const rewardIndex = gameState.unlockedRewards.indexOf(day);
    if (rewardIndex !== -1) {
        gameState.unlockedRewards.splice(rewardIndex, 1);
    }
    
    console.log(`‚ùå –î–µ–Ω—å ${day} —Å–Ω—è—Ç —Å –æ—Ç–º–µ—Ç–∫–∏`);
    
    calculateStreak();
    saveGameState();
    updateInterface();
    
    return true;
}

function calculateStreak() {
    gameState.currentStreak = 0;
    
    if (gameState.markedDays.length > 0) {
        const sorted = [...gameState.markedDays].sort((a, b) => a - b);
        if (sorted[0] === 1) {
            gameState.currentStreak = 1;
            for (let i = 1; i < sorted.length; i++) {
                if (sorted[i] === sorted[i-1] + 1) {
                    gameState.currentStreak++;
                } else {
                    break;
                }
            }
        }
    }
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ===

function saveGameState() {
    const success = saveData('caffeineQuitGame', gameState);
    if (success) {
        console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã');
    }
    return success;
}

function loadGameState() {
    try {
        console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã...');
        console.log('üîç –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', storageMethod);
        
        const savedState = loadData('caffeineQuitGame');
        
        if (savedState) {
            console.log('üì• –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedState);
            
            gameState = {
                markedDays: Array.isArray(savedState.markedDays) ? savedState.markedDays : [],
                unlockedRewards: Array.isArray(savedState.unlockedRewards) ? savedState.unlockedRewards : [],
                startDate: savedState.startDate || null,
                currentStreak: savedState.currentStreak || 0,
                totalMarked: savedState.totalMarked || 0
            };
            
            calculateStreak(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            
            console.log('üì• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', gameState);
            console.log('üì• –§–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', storageMethod);
            updateStorageStatus(storageMethod, 'success');
            return true;
        } else {
            console.log('üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
        updateStorageStatus(storageMethod, 'error');
        return false;
    }
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ===

function updateInterface() {
    updateProgress();
    updateStats();
    updateCalendar();
    updateRewards();
}

function updateProgress() {
    const completed = gameState.totalMarked;
    const percentage = Math.round((completed / TOTAL_DAYS) * 100);
    
    const progressFill = document.getElementById('progressFill');
    const progressDays = document.getElementById('progressDays');
    const progressPercentage = document.getElementById('progressPercentage');
    
    if (progressFill) {
        progressFill.style.width = `${percentage}%`;
    }
    
    if (progressDays) {
        progressDays.textContent = completed;
    }
    
    if (progressPercentage) {
        progressPercentage.textContent = percentage;
    }
}

function updateStats() {
    const earnedRewards = gameState.unlockedRewards.length;
    const moneySaved = gameState.totalMarked * COFFEE_PRICE;
    
    const streakEl = document.getElementById('streakDays');
    const rewardsEl = document.getElementById('rewardsEarned');
    const moneySavedEl = document.getElementById('moneySaved');
    
    if (streakEl) streakEl.textContent = gameState.currentStreak;
    if (rewardsEl) rewardsEl.textContent = earnedRewards;
    if (moneySavedEl) moneySavedEl.textContent = moneySaved + '‚ÇΩ';
}

function updateCalendar() {
    const grid = document.getElementById('calendarGrid');
    if (!grid) return;
    
    grid.innerHTML = '';
    
    for (let day = 1; day <= TOTAL_DAYS; day++) {
        const button = document.createElement('button');
        button.className = 'day-button';
        button.textContent = day;
        
        const isCompleted = gameState.markedDays.includes(day);
        const canMark = canMarkDay(day);
        
        if (isCompleted) {
            button.classList.add('completed');
            button.addEventListener('click', (e) => {
                e.preventDefault();
                unmarkDay(day);
            });
            button.title = `–î–µ–Ω—å ${day} –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É`;
        } else if (canMark) {
            button.classList.add('next-available');
            button.addEventListener('click', (e) => {
                e.preventDefault();
                markDay(day);
            });
            button.title = `–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å ${day} –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π`;
        } else {
            button.classList.add('disabled');
            button.title = `–î–µ–Ω—å ${day} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–º–µ—á–∞–π—Ç–µ –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É`;
        }
        
        grid.appendChild(button);
    }
}

function updateRewards() {
    const grid = document.getElementById('rewardsGrid');
    if (!grid) return;
    
    grid.innerHTML = '';
    
    const sortedRewards = [...gameState.unlockedRewards].sort((a, b) => a - b);
    
    sortedRewards.forEach(day => {
        const reward = rewards[day];
        if (reward) {
            const badge = document.createElement('div');
            badge.className = 'reward-badge';
            
            badge.innerHTML = `
                <div class="reward-icon">${reward.icon}</div>
                <div class="reward-title">${reward.title}</div>
                <div class="reward-description">–î–µ–Ω—å ${day}: ${reward.description}</div>
            `;
            
            grid.appendChild(badge);
        }
    });
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===

function showReward(day) {
    const reward = rewards[day];
    if (!reward) return;
    
    const modal = document.getElementById('rewardModal');
    const overlay = document.getElementById('modalOverlay');
    const icon = document.getElementById('rewardIcon');
    const title = document.getElementById('modalTitle');
    const description = document.getElementById('modalDescription');
    
    if (!modal || !overlay || !icon || !title || !description) return;
    
    icon.textContent = reward.icon;
    title.textContent = reward.title;
    description.textContent = `–î–µ–Ω—å ${day}: ${reward.description}`;
    
    overlay.style.display = 'flex';
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');
}

function closeModal() {
    const modal = document.getElementById('rewardModal');
    const overlay = document.getElementById('modalOverlay');
    
    if (modal) modal.style.display = 'none';
    if (overlay) overlay.style.display = 'none';
    document.body.classList.remove('modal-open');
}

function showTestModal() {
    const modal = document.getElementById('testModal');
    const overlay = document.getElementById('modalOverlay');
    const urlTest = document.getElementById('urlTest');
    const currentMethod = document.getElementById('currentMethod');
    
    if (!modal || !overlay) return;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const testSuccess = setUrlParam('test', { time: Date.now() });
    if (urlTest) {
        urlTest.textContent = testSuccess ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
    if (currentMethod) {
        const methodNames = {
            'cookies': 'Cookies üç™',
            'localStorage': 'Local Storage üíæ',
            'url': 'URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üîó'
        };
        currentMethod.textContent = methodNames[storageMethod] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    overlay.style.display = 'flex';
    modal.style.display = 'flex';
    document.body.classList.add('test-modal-open');
}

function closeTestModal() {
    const modal = document.getElementById('testModal');
    const overlay = document.getElementById('modalOverlay');
    
    if (modal) modal.style.display = 'none';
    if (overlay) overlay.style.display = 'none';
    document.body.classList.remove('test-modal-open');
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô ===

function resetGame() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!')) {
        return;
    }
    
    gameState = {
        markedDays: [],
        unlockedRewards: [],
        startDate: null,
        currentStreak: 0,
        totalMarked: 0
    };
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    try {
        setCookie('caffeineQuitGame', '', -1);
        localStorage.removeItem('caffeineQuitGame');
        const url = new URL(window.location);
        url.searchParams.delete('caffeineQuitGame');
        window.history.replaceState({}, '', url);
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:', e);
    }
    
    updateInterface();
    updateStorageStatus(storageMethod, 'success', 'üóëÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!');
    
    console.log('üóëÔ∏è –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
}

// === –°–¢–ê–¢–£–° –°–û–•–†–ê–ù–ï–ù–ò–Ø ===

function updateStorageStatus(method, status = 'success', customMessage = null) {
    const statusEl = document.getElementById('saveStatus');
    const iconEl = document.getElementById('saveIcon');
    const indicator = document.querySelector('.save-indicator');
    
    if (!statusEl || !iconEl || !indicator) return;
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    indicator.classList.remove('success', 'warning', 'error');
    
    const methodNames = {
        'cookies': 'Cookies',
        'localStorage': 'localStorage', 
        'url': 'URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
    };
    
    let message, icon, className;
    
    if (customMessage) {
        message = customMessage;
        icon = 'üíæ';
        className = 'success';
    } else {
        switch (status) {
            case 'success':
                message = `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${methodNames[method]}`;
                icon = '‚úÖ';
                className = 'success';
                break;
            case 'warning':
                message = `–í–Ω–∏–º–∞–Ω–∏–µ: ${methodNames[method]}`;
                icon = '‚ö†Ô∏è';
                className = 'warning';
                break;
            case 'error':
                message = `–û—à–∏–±–∫–∞: ${methodNames[method]}`;
                icon = '‚ùå';
                className = 'error';
                break;
            default:
                message = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
                icon = 'üíæ';
                className = 'success';
        }
    }
    
    statusEl.textContent = message;
    iconEl.textContent = icon;
    indicator.classList.add(className);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    if (customMessage) {
        setTimeout(() => {
            updateStorageStatus(method, 'success');
        }, 3000);
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

function init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã "30 –î–Ω–µ–π –ë–µ–∑ –ö–æ—Ñ–µ–∏–Ω–∞"');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    detectStorageMethod();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const hasProgress = loadGameState();
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (hasProgress) {
        console.log('üì• –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥:', storageMethod);
    } else {
        console.log('üì• –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥:', storageMethod);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateInterface();
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    const resetBtn = document.getElementById('resetBtn');
    if (resetBtn) {
        resetBtn.addEventListener('click', resetGame);
    }
    
    const testSaveBtn = document.getElementById('testSaveBtn');
    if (testSaveBtn) {
        testSaveBtn.addEventListener('click', showTestModal);
    }
    
    const closeModalBtn = document.getElementById('closeModalBtn');
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closeModal);
    }
    
    const closeTestBtn = document.getElementById('closeTestBtn');
    if (closeTestBtn) {
        closeTestBtn.addEventListener('click', closeTestModal);
    }
    
    const modalOverlay = document.getElementById('modalOverlay');
    if (modalOverlay) {
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                closeModal();
                closeTestModal();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal();
            closeTestModal();
        }
    });
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        if (gameState.totalMarked > 0) {
            saveGameState();
        }
    });
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (hasProgress && gameState.totalMarked > 0) {
        updateStorageStatus(storageMethod, 'success', `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–≥—Ä–µ—Å—Å: ${gameState.totalMarked} –¥–Ω–µ–π!`);
    } else {
        updateStorageStatus(storageMethod, 'success', 'üå± –ù–∞—á–Ω–∏—Ç–µ –≤–∞—à –ø—É—Ç—å –∫ —Å–≤–æ–±–æ–¥–µ –æ—Ç –∫–æ—Ñ–µ–∏–Ω–∞!');
    }
    
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', gameState);
}

// === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

document.addEventListener('DOMContentLoaded', init);

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
setInterval(() => {
    if (gameState.totalMarked > 0) {
        saveGameState();
    }
}, 10000);

console.log('üéØ 30 –î–Ω–µ–π –ë–µ–∑ –ö–æ—Ñ–µ–∏–Ω–∞ - —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');